{
  "name": "Welcome",
  "tagline": "A customizable welcome screen for Android Apps",
  "body": "[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Welcome-blue.svg?style=flat)](http://android-arsenal.com/details/1/3610) [![Download](https://api.bintray.com/packages/stephentuso/maven/welcome/images/download.svg)](https://bintray.com/stephentuso/maven/welcome/_latestVersion) [![Build Status](https://travis-ci.org/stephentuso/welcome-android.svg?branch=master)](https://travis-ci.org/stephentuso/welcome-android) [![codecov](https://codecov.io/gh/stephentuso/welcome-android/branch/master/graph/badge.svg)](https://codecov.io/gh/stephentuso/welcome-android) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/f88fea4256a24130959e16d5c30578ce)](https://www.codacy.com/app/tusodev/welcome-android?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=stephentuso/welcome-android&amp;utm_campaign=Badge_Grade)\r\n\r\nAn easy to use and customizable welcome screen for Android apps.\r\n\r\n![Sample video](https://raw.githubusercontent.com/stephentuso/welcome-android/master/media/sample-video.gif)\r\n\r\nLook in the [sample](https://github.com/stephentuso/welcome-android/blob/master/sample/src/main/java/com/stephentuso/welcomeexample/SampleWelcomeActivity.java) to see how the above welcome screen is created.\r\n\r\n**Features**\r\n\r\n-\tFully customizable\r\n-\tRTL support\r\n-\tAbility to use built in layouts or custom fragments\r\n-\tBuilt in layouts support all screen sizes and orientations\r\n\r\nPlease open a new [issue](https://github.com/stephentuso/welcome-android/issues) if you find a bug or have a problem.\r\n\r\n[Javadoc](http://stephentuso.github.io/welcome-android/javadoc/)\r\n\r\n[Changelog/Releases](https://github.com/stephentuso/welcome-android/releases)\r\n\r\n**Major Changes in 1.0.0**\r\n\r\nIf you used the library prior to version 1.0, read [1.0.0.md](https://github.com/stephentuso/welcome-android/blob/master/1.0.0.md) for details on all breaking changes.\r\n\r\nDemo\r\n====\r\n\r\nA demo app is available on Google play:\r\n\r\n<a href='https://play.google.com/store/apps/details?id=com.stephentuso.welcomeexample&utm_source=global_co&utm_medium=prtnr&utm_content=Mar2515&utm_campaign=PartBadge&pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'><img width='240' alt='Get it on Google Play' src='https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png'/></a>\r\n\r\nThe source code is in the [sample module](https://github.com/stephentuso/welcome-android/blob/master/sample/src/main/).\r\n\r\nContributing\r\n============\r\n\r\nFeel free to open a PR to add a feature or fix a bug, all contributions are welcome. Please read the [contribution notes](https://github.com/stephentuso/welcome-android/CONTRIBUTING.md).\r\n\r\nAll new development takes place on the [dev branch](https://github.com/stephentuso/welcome-android/tree/dev).\r\n\r\nTable of Contents\r\n=================\r\n\r\n-\t[Adding to your project](#adding-to-your-project)\r\n-\t[Basic Usage](#basic-usage)\r\n\t-\t[Extend WelcomeActivity](#extend-welcomeactivity)\r\n\t-\t[Show the welcome screen](#show-the-welcome-screen)\r\n-\t[Skipping/Back button behavior](#skippingback-button-behavior)\r\n-\t[Included pages](#included-pages)\r\n\t-\t[TitlePage](#titlepage)\r\n\t-\t[BasicPage](#basicpage)\r\n\t-\t[ParallaxPage](#parallaxpage)\r\n\t-\t[FullscreenParallaxPage](#fullscreenparallaxpage)\r\n-\t[Custom pages](#custom-pages)\r\n\t-\t[Custom Done Button](#custom-done-button)\r\n-\t[Bottom Layouts](#bottom-layouts)\r\n\t-\t[STANDARD](#standard)\r\n\t-\t[STANDARD_DONE_IMAGE](#standard_done_image)\r\n\t-\t[BUTTON_BAR](#button_bar)\r\n\t-\t[BUTTON_BAR_SINGLE](#button_bar_single)\r\n\t-\t[INDICATOR_ONLY](#indicator_only)\r\n-\t[Styling](#styling)\r\n\t-\t[Themes](#themes)\r\n\t-\t[Styles](#styles)\r\n-\t[Welcome screen keys](#welcome-screen-keys)\r\n-\t[Results](#results)\r\n-\t[Animations](#animations)\r\n-\t[License](#license)\r\n\r\nAdding to your project\r\n======================\r\n\r\nThis library is available through jCenter.\r\n\r\nGradle:\r\n\r\n```groovy\r\ncompile 'com.stephentuso:welcome:1.1.0'\r\n```\r\n\r\nIf you use proguard, add the following to your proguard rules\r\n\r\n```\r\n-keepclassmembers class * extends com.stephentuso.welcome.WelcomeActivity {\r\n    public static java.lang.String welcomeKey();\r\n}\r\n```\r\n\r\nBasic Usage\r\n===========\r\n\r\nExtend WelcomeActivity\r\n----------------------\r\n\r\nTo create a welcome screen, add a class to your project that extends `WelcomeActivity` and add it to AndroidManifest:\r\n\r\n```xml\r\n<activity android:name=\".MyWelcomeActivity\"\r\n    android:theme=\"@style/WelcomeScreenTheme\"/>\r\n```\r\n\r\n*The theme must be a child theme of WelcomeScreenTheme*\r\n\r\nOverride the Activity's `configuration()` method. Use `WelcomeConfiguration.Builder` to set it up:\r\n\r\n```java\r\n@Override\r\nprotected WelcomeConfiguration configuration() {\r\n    return new WelcomeConfiguration.Builder(this)\r\n            .defaultBackgroundColor(R.color.background)\r\n\t\t\t.page(new TitlePage(R.drawable.logo,\r\n\t\t\t\t\t\"Title\")\r\n\t\t\t)\r\n\t\t\t.page(new BasicPage(R.drawable.image,\r\n\t\t\t\t\t\"Header\",\r\n\t\t\t\t\t\"More text.\")\r\n\t\t\t\t\t.background(R.color.red_background)\r\n\t\t\t)\r\n\t\t\t.page(new BasicPage(R.drawable.image,\r\n\t\t\t\t\t\"Lorem ipsum\",\r\n\t\t\t\t\t\"dolor sit amet.\")\r\n\t\t\t)\r\n            .swipeToDismiss(true)\r\n            .build();\r\n}\r\n```\r\n\r\nYou do not need to override `onCreate` or call `setContentView`.\r\n\r\n*Note: defaultBackgroundColor() need to be called before adding pages for now.*\r\n\r\nShow the welcome screen\r\n-----------------------\r\n\r\nWelcome screens are started with `WelcomeHelper`. `onSaveInstanceState` is needed to be sure only one instance of the welcome screen is started. Add the following to the Activity you want to show the welcome screen before (probably your launcher activity):\r\n\r\n```java\r\nWelcomeHelper welcomeScreen;\r\n\r\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    ...\r\n    welcomeScreen = new WelcomeHelper(this, MyWelcomeActivity.class);\r\n    welcomeScreen.show(savedInstanceState);\r\n    ...\r\n}\r\n\r\n@Override\r\nprotected void onSaveInstanceState(Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    welcomeScreen.onSaveInstanceState(outState);\r\n}\r\n```\r\n\r\nIf you have issues with the buttons/indicator being covered by the nav bar, use one of the .SolidNavigation welcome screen themes.\r\n\r\nTo force the welcome screen to be shown, for example, to let the user view it again when a button is pressed, create a `WelcomeHelper` as shown above and call `.forceShow()`.\r\n\r\nSkipping/Back button behavior\r\n=============================\r\n\r\nBy default, the welcome screen can be skipped, and pressing the back button will navigate to the previous page or close (skip) the welcome screen if on the first page. This can be changed with `Builder.canSkip()`, `backButtonSkips()` (only applies if `canSkip` is true), and `backButtonNavigatesPages()`. If you disable skipping, the welcome screen will not be stored as completed when it closes.\r\n\r\nIf you want to require users to navigate through the welcome screen before using the app, call `canSkip(false)` and close your app if the welcome screen's result is `RESULT_CANCELED`.\r\n\r\nSee [Results](https://github.com/stephentuso/welcome-android#results) below for how to respond if a welcome screen is canceled.\r\n\r\nIncluded pages\r\n==============\r\n\r\nThe classes listed below are subclasses of `WelcomePage` and can be used with the `page` method of `WelcomeConfiguration.Builder`\r\n\r\nTitlePage\r\n---------\r\n\r\nA page with an image and a title. A parallax effect can be applied to the image.\r\n\r\nConstructor:\r\n\r\n```java\r\nTitlePage(@DrawableRes int drawableResId, String title)\r\n```\r\n\r\nBasicPage\r\n---------\r\n\r\nA page with an image, heading, and description. A parallax effect can be applied to the image.\r\n\r\nConstructor:\r\n\r\n```java\r\nBasicPage(@DrawableRes int drawableResId, String title, String description)\r\n```\r\n\r\nParallaxPage\r\n------------\r\n\r\nSimilar to the basic page, but instead of an image you can supply a layout that will have a parallax effect applied to it. The speed at which the layout's children move is determined by their position in the layout, the first will move the slowest and the last will move the fastest.\r\n\r\nConstructor:\r\n\r\n```java\r\nParallaxPage(@LayoutRes int layoutResId, String title, String description)\r\n```\r\n\r\nFullscreenParallaxPage\r\n----------------------\r\n\r\nApplies a parallax effect in the same way the normal parallax page does, but the layout you provide fills the whole fragment, and there isn't a header or description.\r\n\r\nConstructor:\r\n\r\n```java\r\nFullscreenParallaxPage(@LayoutRes int layoutResId)\r\n```\r\n\r\nCustom pages\r\n============\r\n\r\nYou can add your own fragments to the welcome screen with `FragmentWelcomePage`:\r\n\r\n```java\r\n@Override\r\nprotected WelcomeConfiguration configuration() {\r\n    return new WelcomeConfiguration.Builder(this)\r\n            ...\r\n\t\t\t.page(new FragmentWelcomePage() {\r\n                    @Override\r\n                    protected Fragment fragment() {\r\n                        return new ExampleFragment();\r\n                    }\r\n                }.background(R.color.red_background))\r\n            ...\r\n}\r\n```\r\n\r\nSee [animations](https://github.com/stephentuso/welcome-android#animations) below for adding animations to custom fragments.\r\n\r\n### Custom Done Button\r\n\r\nIf you want to use a button in a custom fragment instead of the default done button, call `useCustomDoneButton(true)` on the builder and `new WelcomeFinisher(MyFragment.this).finish()` in the button's `OnClickListener`.\r\n\r\nBottom Layouts\r\n==============\r\n\r\nThe layout shown beneath the pages can be changed with the `bottomLayout` Builder method, which uses the `WelcomeConfiguration.BottomLayout` enum. The possible values are explained below.\r\n\r\n### `STANDARD`\r\n\r\nThe default layout, can have skip/previous buttons, the current page indicator, and next/done buttons.\r\n\r\n### `STANDARD_DONE_IMAGE`\r\n\r\nSame as `STANDARD`, but the done button is an `ImageButton` rather than a `Button`. Uses a check mark as the image by default (that can be changed with styles).\r\n\r\n### `BUTTON_BAR`\r\n\r\nHas two buttons side by side at the bottom with the current page indicator above them. By default the text is \"Log In\" and \"Sign Up\", but can be changed with styles. In your `WelcomeActivity` subclass, override `onButtonBarFirstPressed` and `onButtonBarSecondPressed` to handle clicks. More documentation will be added later, see `ButtonBarWelcomeActivity` in the sample for an example.\r\n\r\n### `BUTTON_BAR_SINGLE`\r\n\r\nSame as `BUTTON_BAR`, but with just one button (uses `onButtonBarFirstPressed` for clicks).\r\n\r\n### `INDICATOR_ONLY`\r\n\r\nJust the current page indicator, no buttons.\r\n\r\nStyling\r\n=======\r\n\r\nThemes\r\n------\r\n\r\nThe provided themes are listed below.\r\n\r\nTransparent status/navigation on API 19+. Content does not flow under status bar:\r\n\r\n-\t`WelcomeSceenTheme` - The default theme. For use with dark backgrounds; the text, indicator, and buttons are light colored.\r\n-\t`WelcomeScreenTheme.Light` - For use with light backgrounds; the text, indicator, and buttons are dark colored.\r\n\r\nTransparent status bar, solid navigation bar on API 19+. Content does not flow under status bar:\r\n\r\n-\t`WelcomeScreenTheme.SolidNavigation`\r\n-\t`WelcomeScreenTheme.Light.SolidNavigation`\r\n\r\nTransparent status bar, solid navigation bar on API 19+. Content flows under status bar:\r\n\r\n-\t`WelcomeScreenTheme.SolidNavigation.UnderStatusBar`\r\n-\t`WelcomeScreenTheme.Light.SolidNavigation.UnderStatusBar`\r\n\r\nStyles\r\n------\r\n\r\nTypefaces and a few other things (animations, button visibility) have to be set with `WelcomeConfiguration.Builder`, but everything else that is customizable can be changed with styles.\r\n\r\nYou can add styles as shown below. Optional items are in square brackets.\r\n\r\n```xml\r\n<style name=\"CustomWelcomeScreenTheme\" parent=\"SEE THEMES ABOVE\">\r\n\r\n    <!---- TEXT STYLES ---->\r\n\r\n    <!-- Color of button text and titles/headings (in built in fragments)\r\n        By default, this is also the color of the done/next button -->\r\n    <item name=\"android:textColorPrimary\">color</item>\r\n\r\n    <!-- Color of other text\r\n        By default, this is used for the skip button text color -->\r\n    <item name=\"android:textColorSecondary\">color</item>\r\n\r\n    <!-- Descriptions/other text -->\r\n    <item name=\"welcomeNormalTextStyle\">@style/MyNormalText</item>\r\n    <!-- Headings -->\r\n    <item name=\"welcomeLargeTextStyle\">@style/MyLargeText</item>\r\n    <!-- Titles -->\r\n    <item name=\"welcomeTitleTextStyle\">@style/MyTitleText</item>\r\n\r\n\r\n    <!---- BUTTON STYLES ---->\r\n\r\n    <!-- Background is applied to all buttons,\r\n        to change a specific button background use the individual button styles -->\r\n    <item name=\"welcomeButtonBackground\">drawable</item>\r\n\r\n    <!-- Done/skip button text -->\r\n    <item name=\"welcomeButtonSkipText\">string</item>\r\n    <item name=\"welcomeButtonDoneText\">string</item>\r\n\r\n    <!-- Button styles for STANDARD and STANDARD_DONE_IMAGE -->\r\n    <item name=\"welcomeButtonSkipStyle\">@style/MyButtonSkip</item>\r\n    <item name=\"welcomeButtonNextStyle\">@style/MyButtonNext</item>\r\n    <item name=\"welcomeButtonDoneStyle\">@style/MyButtonDone</item>\r\n\r\n    <!-- Button styles for BUTTON_BAR -->\r\n    <item name=\"welcomeButtonBarFirstStyle\">@style/MyButtonFirst</item>\r\n    <item name=\"welcomeButtonBarSecondStyle\">@style/MyButtonSecond</item>\r\n\r\n\r\n    <!---- OTHER STYLES ---->\r\n\r\n    <!-- Current page indicator -->\r\n    <item name=\"welcomeIndicatorStyle\">@style/MyWelcomeIndicator</item>\r\n\r\n    <!-- Divider between bottom layout and pages -->\r\n    <item name=\"welcomeDividerStyle\">@style/MyWelcomeScreenDivider</item>\r\n\r\n    <!-- The drawable or color to fade to if swipeToDismiss is enabled -->\r\n    <item name=\"android:windowBackground\">drawable|color</item>\r\n\r\n    <!-- Add the following if you want to show the action bar.\r\n        Use Builder.showActionBarBackButton(true) to show\r\n        the back button. -->\r\n    <item name=\"windowActionBar\">true</item>\r\n    <item name=\"windowNoTitle\">false</item>\r\n</style>\r\n\r\n<style name=\"MyWelcomeIndicator\" parent=\"WelcomeScreenPageIndicator[.Light]\">\r\n    <item name=\"indicatorColor\">color</item>\r\n    <item name=\"currentPageColor\">color</item>\r\n    <item name=\"animation\">fade|slide|none</item>\r\n</style>\r\n\r\n<!-- Use this to change the next button's image/color\r\n    To support RTL, add this in values-ldrtl/styles with an image facing left -->\r\n<style name=\"MyButtonNext\" parent=\"WelcomeScreenButton.Next\">\r\n    <item name=\"android:src\">drawable</item>\r\n    <item name=\"android:tint\">color</item>\r\n</style>\r\n\r\n<style name=\"MyButtonSkip\" parent=\"WelcomeScreenButton.Skip\">\r\n    <item name=\"android:textColor\">color</item>\r\n</style>\r\n\r\n<style name=\"MyButtonDone\" parent=\"WelcomeScreenButton.Done\">\r\n    <!-- If using BottomLayuout.STANDARD -->\r\n    <item name=\"android:textColor\">color</item>\r\n    <!-- If using BottomLayout.STANDARD_DONE_IMAGE -->\r\n    <item name=\"android:tint\">color</item>\r\n    <item name=\"android:src\">drawable</item>\r\n</style>\r\n\r\n<!-- A divider that is directly above the buttons/indicator.\r\nThe background color is transparent by default -->\r\n<style name=\"MyWelcomeScreenDivider\" parent=\"WelcomeScreenDivider[.Dark|.Light]\">\r\n    <item name=\"android:background\">drawable|color</item>\r\n    <item name=\"android:layout_height\">dimen</item>\r\n</style>\r\n\r\n<!-- The following can apply to any of the three text styles -->\r\n<style name=\"MyText\" parent=\"WelcomeScreenText[.Large|.Title][.Centered]\">\r\n    <!-- Add any properties that can be applied to a TextView -->\r\n</style>\r\n\r\n```\r\n\r\nWelcome screen keys\r\n===================\r\n\r\nIf you want to use multiple welcome screens (in different parts of your app) or have updated one and want to show it again, you can assign keys (Make sure they are unique!) to welcome screens by adding the following to your welcome screen Activity.\r\n\r\n```java\r\npublic static String welcomeKey() {\r\n    return \"Your unique key\";\r\n}\r\n```\r\n\r\n**Note:** Only change this to a new value if you want everyone who has already used your app to see the welcome screen again! This key is used to determine whether or not to show the welcome screen.\r\n\r\nResults\r\n=======\r\n\r\nYou can listen for the result of a welcome screen in the Activity that started it by overriding `onActivityResult`:\r\n\r\n```java\r\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);\r\n\r\n\r\n    if (requestCode == WelcomeHelper.DEFAULT_WELCOME_SCREEN_REQUEST) {\r\n        // The key of the welcome screen is in the Intent\r\n        String welcomeKey = data.getStringExtra(WelcomeActivity.WELCOME_SCREEN_KEY);\r\n\r\n        if (resultCode == RESULT_OK) {\r\n            // Code here will run if the welcome screen was completed\r\n        } else {\r\n            // Code here will run if the welcome screen was canceled\r\n            // In most cases you'll want to call finish() here\r\n        }\r\n\r\n    }\r\n\r\n}\r\n```\r\n\r\nOne use for this is making sure users see the whole welcome screen before using your app - disable skipping and then close your main activity when the welcome screen is canceled.\r\n\r\nAnimations\r\n==========\r\n\r\nAnimations that play as pages are scrolled can be added to your custom fragments by implementing [WelcomePage.OnChangeListener](http://stephentuso.github.io/welcome-android/javadoc/com/stephentuso/welcome/WelcomePage.OnChangeListener.html). As an example, a fade effect is shown below.\r\n\r\n```java\r\n@Override\r\npublic void onScrolled(int pageIndex, float offset, int offsetPixels) {\r\n    if (Build.VERSION.SDK_INT >= 11 && imageView != null) {\r\n        imageView.setAlpha(1-Math.abs(offset));\r\n    }\r\n}\r\n```\r\n\r\nTo add parallax effects similar to the included parallax page, use [WelcomeUtils.applyParallaxEffect()](http://stephentuso.github.io/welcome-android/javadoc/index.html?overview-summary.html) in `onScrolled`. For example:\r\n\r\n```java\r\n@Override\r\npublic void onScrolled(int pageIndex, float offset, int offsetPixels) {\r\n    if (parallaxLayout != null)\r\n        WelcomeUtils.applyParallaxEffect(parallaxLayout, false, offsetPixels, 0.3f, 0.2f);\r\n}\r\n```\r\n\r\nLicense\r\n=======\r\n\r\n```\r\nCopyright 2015-2016 Stephen Tuso\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}